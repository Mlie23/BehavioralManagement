version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend/Dockerfile
  nginx:
    restart: unless-stopped
    build:
        context: .
        dockerfile: ./docker/nginx/Dockerfile
    ports:
      - 80:80
      - 443:443
    volumes:
      - static_volume:/app/backend/django_static # This connects nginx to the correct static file directory in backend
      - ./docker/nginx:/etc/nginx/conf.d
      - ./docker/nginx/certbot/conf:/etc/letsencrypt
      - ./docker/nginx/certbot/www:/var/www/certbot
    depends_on:
      - backend
      - frontend
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  certbot:
    image: certbot/certbot:latest
    restart: unless-stopped
    volumes:
      - ./docker/nginx/certbot/conf:/etc/letsencrypt
      - ./docker/nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  backend:
    build:
        context: .
        dockerfile: ./docker/backend/Dockerfile
    volumes:
        - static_volume:/app/backend/django_static
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
      - DJANGO_ALLOWED_HOSTS=.aeonmoon.page
    depends_on:
      db:
         condition: service_healthy
    ports:
      - 587:587
    expose:
      - 8000
      - 587
    mem_limit:
        "300M"
    command: /bin/sh -c 'cd /app/backend; gunicorn --bind 0.0.0.0:8000 mosaic.wsgi; python3 manage.py migrate'

  db:
    image: postgres:13-alpine
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
    expose:
      - 5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  static_volume: {}
  postgres_data_prod:
